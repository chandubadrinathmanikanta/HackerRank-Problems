import sys

# Function to perform modular exponentiation (base^exp % mod)
def power_mod(base, exp, mod):
    result = 1
    base %= mod
    while exp > 0:
        if exp & 1:  # If exp is odd
            result = (result * base) % mod
        base = (base * base) % mod
        exp >>= 1  # Equivalent to exp //= 2
    return result

# Miller-Rabin primality test
def miller_rabin(n):
    if n < 2:
        return False
    if n in {2, 3}:
        return True
    if n % 2 == 0:
        return False
    
    d = n - 1
    s = 0
    while d % 2 == 0:
        d //= 2
        s += 1
    
    # Deterministic bases for numbers up to 2^64
    bases = [2, 325, 9375, 28178, 450775, 9780504, 1795265022]
    
    for a in bases:
        if a >= n:
            continue
        x = power_mod(a, d, n)
        if x == 1 or x == n - 1:
            continue
        
        is_composite = True
        for _ in range(s - 1):
            x = power_mod(x, 2, n)
            if x == n - 1:
                is_composite = False
                break
        if is_composite:
            return False
    return True

# Reading input and processing test cases
T = int(sys.stdin.readline().strip())  # Read number of test cases

for _ in range(T):
    num = int(sys.stdin.readline().strip())  # Read the number
    print("Yes" if miller_rabin(num) else "No")
